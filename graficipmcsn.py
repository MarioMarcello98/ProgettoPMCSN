# -*- coding: utf-8 -*-
"""graficiPMCSN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3oIBY_BsRCvfCpVTGpRa_vRfkQ-28cm
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as lines
import os
import sys
import csv
import pandas as pd
import matplotlib
matplotlib.use('Agg')

from google.colab import files
uploaded = files.upload()

pathInfinito= "/content/infinte.csv"
pathFinito= "/content/finite.csv"
pathTransiente1= "/content/transiente300.csv"
pathTransiente2= "/content/transiente301.csv"
pathTransiente3= "/content/transiente303.csv"
pathTransiente4= "/content/transiente304.csv"
pathTransiente5= "/content/transiente305.csv"

import csv
import matplotlib.pyplot as plt
from google.colab import files


theoricWait = [0.500016, 14, 32, 14, 14, 22, 27, 32, 4.016667, 4.016667, 4.016667]
theoricDelay = [0.000016, 2, 20, 2, 2, 10, 20, 30, 0.016667, 0.016667, 0.016667]


nodi_nomi = ["Login", "Women", "Home", "Away", "J1987", "Stadium", "Card", "Free", "WomenPay", "HomePay", "AwayPay"]

def grafici(path):
    csvFile = open(path, newline="\n")
    spamreader = csv.reader(csvFile, delimiter=',')


    delay = []
    wait = []
    service = []
    num_node = []
    num_queue = []
    rho = []
    job = []

    delay.append([])
    wait.append([])
    service.append([])
    num_node.append([])
    num_queue.append([])
    rho.append([])
    job.append([])

    k = 0
    count = 0


    for i in spamreader:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay.append([])
                wait.append([])
                service.append([])
                num_node.append([])
                num_queue.append([])
                rho.append([])
                job.append([])

            wait[k].append(float(i[2]))
            delay[k].append(float(i[3]))
            service[k].append(float(i[4]))
            num_node[k].append(float(i[5]))
            num_queue[k].append(float(i[6]))
            rho[k].append(float(i[7]))
            job[k].append(float(i[8]))

        count = count + 1


    for i in range(0, 11):
        plt.figure(figsize=(10, 10))

        plt.subplot(4, 1, 1)
        plt.title(f"{nodi_nomi[i]} - Tempo di risposta")
        plt.plot(wait[i], "r-", label='Tempo di risposta')
        plt.plot([theoricWait[i]] * len(wait[i]), "--", color="b", label="Tempo di risposta massimo concesso")
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xlabel("Batch", fontsize=14, color="black")
        plt.ylabel("Minuti", fontsize=14, color="black")


        plt.subplot(4, 1, 2)
        plt.title(f"{nodi_nomi[i]} - Tempo in coda")
        plt.plot(delay[i], "r-", label='Tempo in coda')
        plt.plot([theoricDelay[i]] * len(delay[i]), "--", color="b", label="Massimo tempo in coda concesso")
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xlabel("Batch", fontsize=14, color="black")
        plt.ylabel("Minuti", fontsize=14, color="black")


        plt.tight_layout()
        plt.show()


        file_name = f"/content/{nodi_nomi[i]}.png"
        plt.savefig(file_name)
        files.download(file_name)


grafici(pathFinito)

nodi_nomi = ["Login", "Women", "Home", "Away", "J1987", "Stadium", "Card", "Free", "WomenPay", "HomePay", "AwayPay"]

def grafico_transitorio(path1, path2, path3, path4, path5):
    csvFile1= open(path1, newline="\n")
    spamreader1 = csv.reader(csvFile1, delimiter=',')


    delay1 = []
    wait1 = []
    service1 = []
    num_node1 = []
    num_queue1 = []
    rho1 = []
    job1 = []

    delay1.append([])
    wait1.append([])
    service1.append([])
    num_node1.append([])
    num_queue1.append([])
    rho1.append([])
    job1.append([])

    k = 0
    count = 0


    for i in spamreader1:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay1.append([])
                wait1.append([])
                service1.append([])
                num_node1.append([])
                num_queue1.append([])
                rho1.append([])
                job1.append([])

            wait1[k].append(float(i[2]))
            delay1[k].append(float(i[3]))
            service1[k].append(float(i[4]))
            num_node1[k].append(float(i[5]))
            num_queue1[k].append(float(i[6]))
            rho1[k].append(float(i[7]))
            job1[k].append(float(i[8]))

        count = count + 1

    csvFile2= open(path2, newline="\n")
    spamreader2 = csv.reader(csvFile2, delimiter=',')


    delay2 = []
    wait2 = []
    service2 = []
    num_node2 = []
    num_queue2 = []
    rho2 = []
    job2 = []

    delay2.append([])
    wait2.append([])
    service2.append([])
    num_node2.append([])
    num_queue2.append([])
    rho2.append([])
    job2.append([])

    k = 0
    count = 0


    for i in spamreader2:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay2.append([])
                wait2.append([])
                service2.append([])
                num_node2.append([])
                num_queue2.append([])
                rho2.append([])
                job2.append([])

            wait2[k].append(float(i[2]))
            delay2[k].append(float(i[3]))
            service2[k].append(float(i[4]))
            num_node2[k].append(float(i[5]))
            num_queue2[k].append(float(i[6]))
            rho2[k].append(float(i[7]))
            job2[k].append(float(i[8]))

        count = count + 1
    csvFile3= open(path3, newline="\n")
    spamreader3 = csv.reader(csvFile3, delimiter=',')

    delay3 = []
    wait3 = []
    service3 = []
    num_node3 = []
    num_queue3 = []
    rho3 = []
    job3 = []

    delay3.append([])
    wait3.append([])
    service3.append([])
    num_node3.append([])
    num_queue3.append([])
    rho3.append([])
    job3.append([])

    k = 0
    count = 0


    for i in spamreader3:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay3.append([])
                wait3.append([])
                service3.append([])
                num_node3.append([])
                num_queue3.append([])
                rho3.append([])
                job3.append([])

            wait3[k].append(float(i[2]))
            delay3[k].append(float(i[3]))
            service3[k].append(float(i[4]))
            num_node3[k].append(float(i[5]))
            num_queue3[k].append(float(i[6]))
            rho3[k].append(float(i[7]))
            job3[k].append(float(i[8]))

        count = count + 1

    csvFile4= open(path4, newline="\n")
    spamreader4 = csv.reader(csvFile4, delimiter=',')


    delay4 = []
    wait4 = []
    service4 = []
    num_node4 = []
    num_queue4 = []
    rho4 = []
    job4 = []

    delay4.append([])
    wait4.append([])
    service4.append([])
    num_node4.append([])
    num_queue4.append([])
    rho4.append([])
    job4.append([])

    k = 0
    count = 0


    for i in spamreader4:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay4.append([])
                wait4.append([])
                service4.append([])
                num_node4.append([])
                num_queue4.append([])
                rho4.append([])
                job4.append([])

            wait4[k].append(float(i[2]))
            delay4[k].append(float(i[3]))
            service4[k].append(float(i[4]))
            num_node4[k].append(float(i[5]))
            num_queue4[k].append(float(i[6]))
            rho4[k].append(float(i[7]))
            job4[k].append(float(i[8]))

        count = count + 1

    csvFile5= open(path5, newline="\n")
    spamreader5 = csv.reader(csvFile5, delimiter=',')


    delay5 = []
    wait5 = []
    service5 = []
    num_node5 = []
    num_queue5 = []
    rho5 = []
    job5 = []

    delay5.append([])
    wait5.append([])
    service5.append([])
    num_node5.append([])
    num_queue5.append([])
    rho5.append([])
    job5.append([])

    k = 0
    count = 0


    for i in spamreader5:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay5.append([])
                wait5.append([])
                service5.append([])
                num_node5.append([])
                num_queue5.append([])
                rho5.append([])
                job5.append([])

            wait5[k].append(float(i[2]))
            delay5[k].append(float(i[3]))
            service5[k].append(float(i[4]))
            num_node5[k].append(float(i[5]))
            num_queue5[k].append(float(i[6]))
            rho5[k].append(float(i[7]))
            job5[k].append(float(i[8]))

        count = count + 1


    for i in range(0, 11):
        plt.figure(figsize=(10, 10))

        N = 640
        tempi = np.linspace(0, 7200, N)


        plt.subplot(4, 1, 1)
        plt.title(f"{nodi_nomi[i]} - Transitorio")
        plt.plot(tempi, num_node1[i], "r-", label='647513900')
        plt.plot(tempi, num_node2[i], "b-", label='1156906022')
        plt.plot(tempi, num_node3[i], "m-", label='1853427511')
        plt.plot(tempi, num_node4[i], "g-", label='823197044')
        plt.plot(tempi, num_node5[i], "k-", label='133334457')
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xlabel("Tempo", fontsize=14, color="black")
        plt.ylabel("job nel nodo", fontsize=14, color="black")



        plt.tight_layout()
        plt.show()


        file_name = f"/content/{nodi_nomi[i]}.png"
        plt.savefig(file_name)
        files.download(file_name)






grafico_transitorio(pathTransiente1, pathTransiente2, pathTransiente3, pathTransiente4, pathTransiente5)

import csv
import matplotlib.pyplot as plt
from google.colab import files


theoricWait = [0.500016, 14, 32, 14, 14, 22, 27, 32, 4.016667, 4.016667, 4.016667]
theoricDelay = [0.000016, 2, 20, 2, 2, 10, 20, 30, 0.016667, 0.016667, 0.016667]


nodi_nomi = ["Login", "Women", "Home", "Away", "J1987", "Stadium", "Card", "Free", "WomenPay", "HomePay", "AwayPay"]

def grafici(path):
    csvFile = open(path, newline="\n")
    spamreader = csv.reader(csvFile, delimiter=',')


    delay = []
    wait = []
    service = []
    num_node = []
    num_queue = []
    rho = []
    job = []

    delay.append([])
    wait.append([])
    service.append([])
    num_node.append([])
    num_queue.append([])
    rho.append([])
    job.append([])

    k = 0
    count = 0


    for i in spamreader:
        if count != 0:
            if int(i[0]) != k:
                k = k + 1
                delay.append([])
                wait.append([])
                service.append([])
                num_node.append([])
                num_queue.append([])
                rho.append([])
                job.append([])

            wait[k].append(float(i[2]))
            delay[k].append(float(i[3]))
            service[k].append(float(i[4]))
            num_node[k].append(float(i[5]))
            num_queue[k].append(float(i[6]))
            rho[k].append(float(i[7]))
            job[k].append(float(i[8]))

        count = count + 1


    for i in range(0, 11):
        plt.figure(figsize=(10, 10))


        plt.subplot(4, 1, 1)
        plt.title(f"{nodi_nomi[i]} - Tempo di risposta")
        plt.plot(wait[i], "r-", label='Tempo di risposta')
        plt.plot([theoricWait[i]] * len(wait[i]), "--", color="b", label="Tempo di risposta massimo concesso")
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xlabel("Tempo della simulazione", fontsize=14, color="black")
        plt.ylabel("Minuti", fontsize=14, color="black")


        plt.subplot(4, 1, 2)
        plt.title(f"{nodi_nomi[i]} - Tempo in coda")
        plt.plot(delay[i], "r-", label='Tempo in coda')
        plt.plot([theoricDelay[i]] * len(delay[i]), "--", color="b", label="Massimo tempo in coda concesso")
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xlabel("Tempo della simulazione", fontsize=14, color="black")
        plt.ylabel("Minuti", fontsize=14, color="black")


        plt.tight_layout()
        plt.show()


        file_name = f"/content/{nodi_nomi[i]}.png"
        plt.savefig(file_name)
        files.download(file_name)

grafici(pathInfinito)